#include <termios.h>
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/signal.h>
#include <sys/types.h>
#include <pthread.h>
#include <errno.h>

#define BAUDRATE B38400
#define MODEMDEVICE "/dev/ttyS1"
#define _POSIX_SOURCE 1         //POSIX compliant source
#define FALSE 0
#define TRUE 1

volatile int STOP=FALSE;

void signal_handler_IO (int status);    //definition of signal handler
void signal_handler_INT (int status);
int wait_flag=TRUE;                     //TRUE while no signal received
char devicename[80];
long Baud_Rate = 38400;         // default Baud Rate (110 through 38400)
long BAUD;                      // derived baud rate from command line
long DATABITS;
long STOPBITS;
long PARITYON;
long PARITY;
int Data_Bits = 8;              // Number of data bits
int Stop_Bits = 1;              // Number of stop bits
int Parity = 0;                 // Parity as follows:
                  // 00 = NONE, 01 = Odd, 02 = Even, 03 = Mark, 04 = Space
int Format = 4;
FILE *input;
FILE *output;
int status;

int fd;
int g_argc = 0;
int fdin;
struct termios oldtio, newtio;       //place for old and new port settings for serial port
struct termios oldkey, newkey;       //place tor old and new port settings for keyboard teletype
FILE *log = NULL;


void *ser_out_old (void *args)
{
	int nread;
	char buff[512], Key;
	int c, ret;
	char cc= 'b';
	unsigned char acbuf[] = {0x1b,0x5b};
	unsigned char acbufup = 0x41;
	unsigned char acbufdown = 0x42;
	int up = 0;
	
    printf ("%c", cc);
	printf ("*************start inputing char...\r\n");
	printf ("%c", cc);
	while(1)
	{
       //c = fread(&Key,1,1,input);
       c = read (0, &Key, 1);
       if (c==1)  //if a key was hit
       {
	   	  if (g_argc >= 8)
	   	  {
	   	      printf ("\r\nget a local char %c:::::%d\r\n", Key, Key);
	   	      if (log)
			      fprintf (log, "\r\nget a local char %c:::::%d\r\n", Key, Key);
			  
	   	  }
          /////
		  if (Key == '[')
		  {
		  	 write(fd, acbuf, 2);
			 tcdrain(fd);
			 up = 1;
			 continue;
		  }
		  else
		  {
		  	 
		  }

		  if (Key == 24)
		  {
		  	tcflush(fdin, TCIFLUSH);
	        tcsetattr(fdin,TCSANOW,&oldtio);
		  	exit(1);
		  }
		  
		  if (Key == 'A' && up)
		  {
		  	 up = 0;
			 write(fd, &acbufup, 1);
			 tcdrain(fd);
			 continue;
		  }

		  if (Key == 'B' && up)
		  {
		  	 up = 0;
			 write(fd, &acbufdown, 1);
			 tcdrain(fd);
			 continue;
		  }
		  	
		  /////
          switch (Key)
          { /* branch to appropiate key handler */
             case 0x1b: /* Esc */
                STOP=TRUE;
                break;
             default:
                //fputc((int) Key,output);
//                  sprintf(message,"%x ",Key);  //debug
//                  fputs(message,output);
                ret = write(fd, &Key, 1);          //write 1 byte to the port
                if (1 != ret)
				{
			        printf ("write fail, so abort, reason %s\r\n", strerror(errno));
					return -1;
				}
                tcdrain(fd);
				//ret = tcdrain(fd);          //write 1 byte to the port
				ret = 0;
                if (ret)
				{
			        printf ("tcdrain fail %d, so abort, reason %s\r\n", ret, strerror(errno));
					return -1;
				}
				//printf ("get and write a char %c\r\n", Key);
                break;
         }  //end of switch key
       }  
	   else
	   {
	   	    printf ("fread fail, so abort, reason %s\r\n", strerror(errno));
	   }
	}
}



void *ser_out (void *args)
{
	int nread;
	char buff[512], Key;
	int c, ret;
	char cc= 'b';
	unsigned char acbuf[] = {0x1b,0x5b};
	unsigned char acbufup = 0x41;
	unsigned char acbufdown = 0x42;
	int up = 0;
	
    printf ("%c", cc);
	printf ("*************start inputing char...\r\n");
	printf ("%c", cc);
	while(1)
	{
       //c = fread(&Key,1,1,input);
       c = read (0, &Key, 1);
       if (c==1)  //if a key was hit
       {
	   	  if (g_argc >= 8)
	   	  {
	   	      //printf ("\r\nget a local char %c:::::%d\r\n", Key, Key);
	   	      if (log)
			      fprintf (log, "\r\nget a local char %c:::::%d\r\n", Key, Key);
			  
	   	  }
          

		  if (Key == 24)
		  {
		  	tcflush(fdin, TCIFLUSH);
	        tcsetattr(fdin,TCSANOW,&oldtio);
		  	exit(1);
		  }
		  	
		  /////
          switch (Key)
          { /* branch to appropiate key handler */
		  	#if 0
             case 0x1b: /* Esc */
                STOP=TRUE;
                break;
			#endif
             default:
                //fputc((int) Key,output);
//                  sprintf(message,"%x ",Key);  //debug
//                  fputs(message,output);
                ret = write(fd, &Key, 1);          //write 1 byte to the port
                if (1 != ret)
				{
			        printf ("write fail, so abort, reason %s\r\n", strerror(errno));
					return -1;
				}
                tcdrain(fd);
				//ret = tcdrain(fd);          //write 1 byte to the port
				ret = 0;
                if (ret)
				{
			        printf ("tcdrain fail %d, so abort, reason %s\r\n", ret, strerror(errno));
					return -1;
				}
				//printf ("get and write a char %c\r\n", Key);
                break;
         }  //end of switch key
       }  
	   else
	   {
	   	    printf ("fread fail, so abort, reason %s\r\n", strerror(errno));
	   }
	}
}


#define POSIX_TERMIOS
#define _DCDFLOW

/*
 * Set baudrate, parity and number of bits.
 */
void m_setparms(int fd)
{
  int spd = -1;
  int newbaud;
  //int bit = bits[0];

  char *baudr; char *par; char *bits; char *stopb;
                int hwf = 0;
				int swf = 1;

#ifdef POSIX_TERMIOS
  struct termios tty;
#else /* POSIX_TERMIOS */
  struct sgttyb tty;
#endif /* POSIX_TERMIOS */

#ifdef USE_SOCKET
  if (portfd_is_socket)
    return;
#endif

#ifdef POSIX_TERMIOS
  tcgetattr(fd, &tty);
#else /* POSIX_TERMIOS */
  ioctl(fd, TIOCGETP, &tty);
#endif /* POSIX_TERMIOS */


  



#ifdef POSIX_TERMIOS



  /* Set into raw, no echo mode */
  tty.c_iflag =  IGNBRK;
  tty.c_lflag = 0;
  tty.c_oflag = 0;
  tty.c_cflag |= CLOCAL | CREAD;
#ifdef _DCDFLOW
  tty.c_cflag &= ~CRTSCTS;
#endif
  tty.c_cc[VMIN] = 1;
  tty.c_cc[VTIME] = 5;

  if (swf)
    tty.c_iflag |= IXON | IXOFF;
  else
    tty.c_iflag &= ~(IXON|IXOFF|IXANY);

  tty.c_cflag &= ~(PARENB | PARODD);
  

  tcsetattr(fd, TCSANOW, &tty);

  //m_setrts(fd);
#endif /* POSIX_TERMIOS */

#ifndef _DCDFLOW
  m_sethwf(fd, hwf);
#endif
}


main(int Parm_Count, char *Parms[])
{
   char version[80] = "       POSIX compliant Communications test program version 1.00 4-25-1999\r\n";
   char version1[80] = "          Copyright(C) Mark Zehner/Peter Baumann 1999\r\n";
   char version2[80] = " This code is based on a DOS based test program by Mark Zehner and a Serial\r\n";
   char version3[80] = " Programming POSIX howto by Peter Baumann, integrated by Mark Zehner\r\n";  
   char version4[80] = " This program allows you to send characters out the specified port by typing\r\n";
   char version5[80] = " on the keyboard.  Characters typed will be echoed to the console, and \r\n";
   char version6[80] = " characters received will be echoed to the console.\r\n";
   char version7[80] = " The setup parameters for the device name, receive data format, baud rate\r\n";
   char version8[80] = " and other serial port parameters must be entered on the command line \r\n";
   char version9[80] = " To see how to do this, just type the name of this program. \r\n";
   char version10[80] = " This program is free software; you can redistribute it and/or modify it\r\n";
   char version11[80] = " under the terms of the GNU General Public License as published by the \r\n";
   char version12[80] = " Free Software Foundation, version 2.\r\n";
   char version13[80] = " This program comes with ABSOLUTELY NO WARRANTY.\r\n";
   char instr[100] ="\r\nOn the command you must include six items in the following order, they are:\r\n";
   char instr1[80] ="   1.  The device name      Ex: ttyS0 for com1, ttyS1 for com2, etc\r\n";
   char instr2[80] ="   2.  Baud Rate            Ex: 38400 \r\n";
   char instr3[80] ="   3.  Number of Data Bits  Ex: 8 \r\n";
   char instr4[80] ="   4.  Number of Stop Bits  Ex: 0 or 1\r\n";
   char instr5[80] ="   5.  Parity               Ex: 0=none, 1=odd, 2=even\r\n";
   char instr6[80] ="   6.  Format of data received:  1=hex, 2=dec, 3=hex/asc, 4=dec/asc, 5=asc\r\n";
   char instr7[80] =" Example command line:  com ttyS0 38400 8 0 0 4 \r\n";
   char Param_strings[7][80];
   char message[90];
   
   pthread_t thread;
   int ret;
   struct termios initialrsettings, newrsettings; 

   int  tty, c, res, i, error;
   char In1, Key;
   
   struct sigaction saio;               //definition of signal action
   char buf[255];                       //buffer for where data is put
   int tmp1;
#if 0
   if (Parms[6][0] == '6') 
   {
   	   printf ("hihi, i press a key to return");
	   scanf ("%d", &tmp1);

	   printf ("input %d", tmp1);

	   //return;
   }
 #endif  
   g_argc = Parm_Count;
   input = fopen("/dev/tty", "r");      //open the terminal keyboard
   output = fopen("/dev/tty", "w");     //open the terminal screen
   ///dev/ttyUSB0
   if (!input || !output)
   {
      fprintf(stderr, "Unable to open /dev/tty\n");
      exit(1);
   }
//#if 0
   if (Parms[6][0] == '6') 
   {
   	   printf ("2 after hihi,   press a key to return  ");
	   scanf ("%d", &tmp1);

	   printf ("2 after input %d", tmp1);

	   //return;
   }
//#endif
   error=0;
   fputs(version,output);               //display the program introduction
   fputs(version1,output);
   fputs(version2,output);
   fputs(version3,output);
   fputs(version4,output);
   fputs(version5,output);
   fputs(version6,output);
   fputs(version7,output);
   fputs(version8,output);
   fputs(version9,output);
   fputs(version10,output);
   fputs(version11,output); 
   fputs(version12,output);
   fputs(version13,output);
   //read the parameters from the command line
   if (Parm_Count>=7)  //if there are the right number of parameters on the command line
   {
      for (i=1; i<Parm_Count; i++)  // for all wild search parameters
      {
         strcpy(Param_strings[i-1],Parms[i]);
      }
      i=sscanf(Param_strings[0],"%s",devicename);
      if (i != 1) error=1;
      i=sscanf(Param_strings[1],"%li",&Baud_Rate);
      if (i != 1) error=1;
      i=sscanf(Param_strings[2],"%i",&Data_Bits);
      if (i != 1) error=1;
      i=sscanf(Param_strings[3],"%i",&Stop_Bits);
      if (i != 1) error=1;
      i=sscanf(Param_strings[4],"%i",&Parity);
      if (i != 1) error=1;
      i=sscanf(Param_strings[5],"%i",&Format);
      if (i != 1) error=1;
      sprintf(message,"Device=%s, Baud=%li\r\n",devicename, Baud_Rate); //output the received setup parameters
      fputs(message,output);
      sprintf(message,"Data Bits=%i  Stop Bits=%i  Parity=%i  Format=%i\r\n",Data_Bits, Stop_Bits, Parity, Format);
      fputs(message,output);
   }  //end of if param_count==7
   if ((Parm_Count>=7) && (error==0))  //if the command line entrys were correct
   {     
#if 0
	//run the program
      tty = open("/dev/tty", O_RDWR | O_NOCTTY | O_NONBLOCK); //set the user console port up
      tcgetattr(tty,&oldkey); // save current port settings   //so commands are interpreted right for this program
      // set new port settings for non-canonical input processing  //must be NOCTTY
      newkey.c_cflag = BAUDRATE | CRTSCTS | CS8 | CLOCAL | CREAD;
      newkey.c_iflag = IGNPAR;
      newkey.c_oflag = 0;
      //newkey.c_oflag &= ~OPOST
      newkey.c_lflag = 0;       //ICANON;
      newkey.c_cc[VMIN]=1;
      newkey.c_cc[VTIME]=0;
      //tcflush(tty, TCIFLUSH);
      //tcsetattr(tty,TCSANOW,&newkey);
#endif
      switch (Baud_Rate)
      {
	  	 case 115200:
         //default:
            BAUD = B115200;
            break;
			
         case 38400:
         default:
            BAUD = B38400;
            break;
         case 19200:
            BAUD  = B19200;
            break;
         case 9600:
            BAUD  = B9600;
            break;
         case 4800:
            BAUD  = B4800;
            break;
         case 2400:
            BAUD  = B2400;
            break;
         case 1800:
            BAUD  = B1800;
            break;
         case 1200:
            BAUD  = B1200;
            break;
         case 600:
            BAUD  = B600;
            break;
         case 300:
            BAUD  = B300;
            break;
         case 200:
            BAUD  = B200;
            break;
         case 150:
            BAUD  = B150;
            break;
         case 134:
            BAUD  = B134;
            break;
         case 110:
            BAUD  = B110;
            break;
         case 75:
            BAUD  = B75;
            break;
         case 50:
            BAUD  = B50;
            break;
      }  //end of switch baud_rate
      switch (Data_Bits)
      {
         case 8:
         default:
            DATABITS = CS8;
            break;
         case 7:
            DATABITS = CS7;
            break;
         case 6:
            DATABITS = CS6;
            break;
         case 5:
            DATABITS = CS5;
            break;
      }  //end of switch data_bits
      switch (Stop_Bits)
      {
         case 1:
         default:
            STOPBITS = 0;
            break;
         case 2:
            STOPBITS = CSTOPB;
            break;
      }  //end of switch stop bits
      switch (Parity)
      {
         case 0:
         default:                       //none
            PARITYON = 0;
            PARITY = 0;
            break;
         case 1:                        //odd
            PARITYON = PARENB;
            PARITY = PARODD;
            break;
         case 2:                        //even
            PARITYON = PARENB;
            PARITY = 0;
            break;
      }  //end of switch parity
       
      //open the device(com port) to be non-blocking (read will return immediately)
      fd = open(devicename, O_RDWR | O_NOCTTY | O_NONBLOCK);
      if (fd < 0)
      {
	  	 printf ("open %s failed\r\n", devicename);
         perror(devicename);
         exit(-1);
      }

	  

      //install the serial handler before making the device asynchronous

	  //#if 0
      saio.sa_handler = signal_handler_IO;
      sigemptyset(&saio.sa_mask);   //saio.sa_mask = 0;
      saio.sa_flags = 0;
      saio.sa_restorer = NULL;

	  if (5 == Format ||  3 == Format)
	  {
	      sigaction(SIGIO,&saio,NULL);
	      //#endif

		  signal(SIGINT, signal_handler_INT); 
	  }

	  #if 0
      // allow the process to receive SIGIO
      fcntl(fd, F_SETOWN, getpid());
      // Make the file descriptor asynchronous (the manual page says only
      // O_APPEND and O_NONBLOCK, will work with F_SETFL...)
      fcntl(fd, F_SETFL, FASYNC);
      #endif

	  m_setparms (fd);
      //tcgetattr(fd,&oldtio); // save current port settings 
      tcgetattr(fd,&newtio);
      // set new port settings for canonical input processing 
      newtio.c_cflag = BAUD | CRTSCTS | DATABITS | STOPBITS | PARITYON | PARITY | CLOCAL | CREAD;
	 // #if 0
	  newtio.c_cflag &= ~CRTSCTS;

	  newtio.c_iflag = IGNCR;///
      ///newtio.c_iflag = IGNPAR;

	  //newtio.c_iflag &
	  //newtio.c_iflag &= ~IGNCR;

	  ///////
	  //newtio.c_lflag |= (ECHO | ECHONL | ICANON | ISIG | IEXTEN);
	  //newtio.c_cflag |= (ECHO | ECHONL | ICANON | ISIG | IEXTEN);
	  ///////
	  //newtio.c_cflag |= ECHO;
	  newtio.c_lflag |= ECHO;

	  
      newtio.c_oflag = 0;
	  newtio.c_oflag = OCRNL;///
      newtio.c_lflag = 0;       //ICANON;
      newtio.c_cc[VMIN]= 1;//1;
      newtio.c_cc[VTIME]= 50;//0;

	  
	  if (5 != Format)
	  {
	  	printf ("setting raw mode...\r\n");
	  	cfmakeraw (&newtio);
	  }
	  else
	  	printf ("setting cononical mode...\r\n");
       char aaa = 'b';
	   
	   printf("%c",aaa);

	  
      //#endif
      tcflush(fd, TCIFLUSH);
      tcsetattr(fd,TCSANOW,&newtio);
      printf("%c",aaa);



       if (3 == Format)
       {
		   fdin = fileno(input);
		   tcgetattr(fdin,&oldtio); // save current port settings 
		   newtio = oldtio;
           newtio.c_lflag &= ~ECHO; 

		   //////
		   newtio.c_lflag &= (~ICANON);    // 不使用标准模式，即取消行缓冲
           newtio.c_cc[VTIME] = 0;
           newtio.c_cc[VMIN] = 1;

	       /////
		   tcflush(fdin, TCIFLUSH);
	       tcsetattr(fdin,TCSANOW,&newtio);
       }
	  
      if (g_argc >= 8)
   	  {
	  	  log = fopen ("log", "w+");
		  if (NULL == log)
		  {
   	         printf ("\r\fopen log failed\r\n");
		  }
   	  }

	  printf ("\r\fopen log succ\r\n");
	  
	  ret = pthread_create (&thread, NULL, ser_out, 0);
	  //ret = 0;
	  if (0 != ret)
	  {
    	  printf ("pthread_create serial_in fail, so abort, reason %s\r\n", strerror(errno));
		  return -1;
	  }
      printf ("XXXXXXXXXXXXXX start ser_out OK...\r\n");
	  printf("hi: %c",aaa);

	  if (Parms[6][0] == '6') 
	   {
	   	   printf ("  bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb  ");
		   printf ("  fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff  ");
	   	   printf ("  10 hihi,  press a key to return  ");
		   scanf ("%d", &tmp1);

		   printf ("  XXXXXXXXXXXXXXXXXXXX ccccccccccccccccc  10 input %d  ", tmp1);

		   printf ("  110 hihi,  press a key to return  ");
		   fflush(stdout);
		   //return;
	   }
      //while (STOP==FALSE)
      while(1)
      {
		 int len = 255;
            if (Format != 4)
                res = read(fd,buf,len);
			else
			{   
				res = 1;
				buf[0] = 'f';
			}
            if (res>0)
            {
               for (i=0; i<res; i++)  //for all chars in string
               {
                  In1 = buf[i];
                  switch (Format)
                  {
                     case 1:         //hex
                     /*
                        sprintf(message,"%x ",In1);
                        fputs(message,output);
						*/
						printf("got 0x%x %c\r\n",In1, In1);
						fputc ((int) In1, output);
                        break;
                     case 2:         //decimal
                        //printf("got 0x%x %c\r\n",In1, In1);
                        //printf("%c",In1);
						fputc ((int) In1, output);
						fflush(output);
                        //fputs(message,output);
                        break;
					 case 6:         //decimal
                        //printf("got 0x%x %c\r\n",In1, In1);
                        printf ("  11 hihi,  press a key to return  ");
					   scanf ("%d", &tmp1);

					   printf ("  11 input %d", tmp1);
					   
fflush(stdout);
                        printf("%c",In1);
					    fflush(stdout);
                        //fputs(message,output);
                        break;
                     case 3: 
					 	fputc ((int) In1, output);
						fflush(output);
                        break;
                     case 4:         //decimal and asc
                        printf("got 0x%x %c\r\n",In1, In1);
                        printf("char: %c",In1);
						sleep (3);
                        //fputs(message,output);
                        break;
                     case 5:         //asc
                        putchar (In1);
						fflush(stdout);
                        break;
					default:
					   fputc ((int) In1, output);
					   break;
						
                  }  //end of switch format
               }  //end of for all chars in string
            }  //end if res>0
            else
            {
				//printf ("ccccccccc read fail %d != len %d, so abort, reason %d %s\r\n", res, len, errno, strerror(errno));
            }
            wait_flag = TRUE;       /* wait for new input */

      }  //while stop==FALSE

	  
      // restore old port settings
      tcsetattr(fd,TCSANOW,&oldtio);
      //tcsetattr(tty,TCSANOW,&oldkey);
      //close(tty);
      close(fd);        //close the com port
   }  //end if command line entrys were correct
   else  //give instructions on how to use the command line
   {
      fputs(instr,output);
      fputs(instr1,output);
      fputs(instr2,output);
      fputs(instr3,output);
      fputs(instr4,output);
      fputs(instr5,output);
      fputs(instr6,output);
      fputs(instr7,output);
   }
   fclose(input);
   fclose(output);
}  //end of main

/***************************************************************************
* signal handler. sets wait_flag to FALSE, to indicate above loop that     *
* characters have been received.                                           *
***************************************************************************/

void signal_handler_IO (int status)
{
  unsigned char Key = 3;
  int ret;
  
   //printf("received SIGIOsignal.\n");
   wait_flag = FALSE;
  
}

void signal_handler_INT (int status)
{
  unsigned char Key = 3;
  int ret;
  
   printf("received SIGINT signal.\n");
   wait_flag = FALSE;
   ret = write(fd, &Key, 1); 
   if (1 != ret)
	{
        printf ("signal_handler_IO write fail, so abort, reason %s\r\n", strerror(errno));
		return -1;
	}
}


/*
as my minicom

gcc m.c -o m -lpthread

./m /dev/ttyUSB0 115200 8 1 0 3 


*/

